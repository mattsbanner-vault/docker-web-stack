version: '3.5'

services:

  elasticsearch:
    container_name: ${STACK_PREFIX}elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTICSEARCH_VERSION}
    restart: unless-stopped
    command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    volumes:
      - ${VOLUME_PATH}/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - web
    ports:
      - ${ELASTICSEARCH_PORT}:9200

  kibana:
    container_name: ${STACK_PREFIX}kibana
    image: docker.elastic.co/kibana/kibana:${KIBANA_VERSION}
    depends_on:
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - ${KIBANA_PORT}:5601
    networks:
      - web

  mailhog:
   container_name: ${STACK_PREFIX}mailhog
   image: mailhog/mailhog:${MAILHOG_VERSION}
   restart: unless-stopped
   networks:
     - web
   ports:
     - ${MAILHOG_SMTP_PORT}:1025
     - ${MAILHOG_WEB_PORT}:8025

  mongo:
    image: mongo:${MONGODB_VERSION}
    command: mongod --auth
    container_name: ${STACK_PREFIX}mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_PASSWORD}
    networks:
      - web
    ports:
      - ${MONGODB_PORT}:27017
    volumes:
      - ${VOLUME_PATH}/mongo/:/data/db

  mongo-express:
    image: mongo-express:${MONGO_EXPRESS_VERSION}
    container_name: ${STACK_PREFIX}mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGODB_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGODB_PASSWORD}
    links:
      - mongo
    depends_on:
      - mongo
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    networks:
      - web

  mysql:
    container_name: ${STACK_PREFIX}mysql
    image: mysql:${MYSQL_VERSION}
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=example
    networks:
      - web
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ${VOLUME_PATH}/mysql/:/var/lib/mysql/

  phpmyadmin:
    container_name: ${STACK_PREFIX}phpmyadmin
    image: phpmyadmin/phpmyadmin:${PHPMYADMIN_VERSION}
    restart: unless-stopped
    ports:
      - ${PHPMYADMIN_PORT}:80
    networks:
      - web
    depends_on:
      - mysql
    external_links:
      - mysql:db

  portainer:
    container_name: ${STACK_PREFIX}portainer
    image: portainer/portainer:${PORTAINER_VERSION}
    restart: always
    ports:
      - ${PORTAINER_PORT}:9000
    networks:
      - web
    volumes:
      - ${VOLUME_PATH}/portainer/:/data
      - ${DOCKER_SOCKET}:/var/run/docker.sock

  redis:
    container_name: ${STACK_PREFIX}redis
    image: bitnami/redis:${REDIS_VERSION}
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - web
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ${VOLUME_PATH}/redis/:/data

  redis-commander:
    container_name: ${STACK_PREFIX}redis-commander
    image: rediscommander/redis-commander:${REDIS_COMMANDER_VERSION}
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - REDIS_HOSTS=redis:redis:6379:0:${REDIS_PASSWORD}
    ports:
      - ${REDIS_COMMANDER_PORT}:8081
    networks:
      - web

  dynamodb:
    container_name: ${STACK_PREFIX}dynamodb
    image: amazon/dynamodb-local:${DYNAMODB_VERSION}
    restart: unless-stopped
    ports:
      - ${DYNAMODB_PORT}:8000
    volumes:
      - ${VOLUME_PATH}/dynamodb/:/home/dynamodblocal/data
    working_dir: /home/dynamodblocal
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath /home/dynamodblocal/data/"
    networks:
      - web

  dynamodb-admin:
    container_name: ${STACK_PREFIX}dynamodb-admin
    image: aaronshaf/dynamodb-admin:${DYNAMODB_ADMIN_VERSION}
    restart: unless-stopped
    depends_on:
      - dynamodb
    ports:
      - ${DYNAMODB_ADMIN_PORT}:8001
    environment:
      DYNAMO_ENDPOINT: http://dynamodb:8000
      AWS_REGION: local
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local
    networks:
      - web

networks:

  web:
    name: ${STACK_PREFIX}web
    driver: bridge
