version: '3.5'

services:

  mailhog:
   container_name: ${CONTAINER_NAME_PREFIX}mailhog
   image: mailhog/mailhog:latest
   restart: unless-stopped
   networks:
     - web
   ports:
     - 1025:1025
     - 8025:8025

  mongo:
    image: mongo:4.2
    command: mongod --auth
    container_name: ${CONTAINER_NAME_PREFIX}mongo
    restart: unless-stopped
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
    networks:
      - web
    ports:
      - ${MONGO_PORT}:27017
    volumes:
      - ${VOLUME_PATH}/mongo/:/data/db

  mongo-express:
    image: mongo-express:0.54
    container_name: ${CONTAINER_NAME_PREFIX}mongo-express
    restart: unless-stopped
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USER}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}
    links:
      - mongo
    depends_on:
      - mongo
    networks:
      - web

  mysql:
    container_name: ${CONTAINER_NAME_PREFIX}mysql
    image: mysql:${MYSQL_VERSION}
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_USER=${MYSQL_USER}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD}
      - MYSQL_DATABASE=example
    networks:
      - web
    ports:
      - ${MYSQL_PORT}:3306
    volumes:
      - ${VOLUME_PATH}/mysql/:/var/lib/mysql/

  phpmyadmin:
    container_name: ${CONTAINER_NAME_PREFIX}phpmyadmin
    image: phpmyadmin/phpmyadmin:5.0.1
    restart: unless-stopped
    networks:
      - web
    depends_on:
      - mysql
    external_links:
      - mysql:db

  redis:
    container_name: ${CONTAINER_NAME_PREFIX}redis
    image: bitnami/redis:5.0.6
    restart: unless-stopped
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - web
    ports:
      - ${REDIS_PORT}:6379
    volumes:
      - ${VOLUME_PATH}/redis/:/data

  redis-commander:
    container_name: ${CONTAINER_NAME_PREFIX}redis-commander
    image: rediscommander/redis-commander:latest
    restart: unless-stopped
    environment:
      - REDIS_HOST=redis
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    depends_on:
      - redis
    networks:
      - web

  portainer:
    container_name: ${CONTAINER_NAME_PREFIX}portainer
    image: portainer/portainer:latest
    restart: always
    ports:
      - 9000:9000
    networks:
      - web
    volumes:
      - ${VOLUME_PATH}/portainer/:/data
      - ${DOCKER_SOCKET}:/var/run/docker.sock

  elasticsearch:
    container_name: ${CONTAINER_NAME_PREFIX}elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:6.5.4
    restart: unless-stopped
    command: [ "bin/elasticsearch", "-Expack.security.enabled=false", "-Ediscovery.type=single-node" ]
    volumes:
      - ${VOLUME_PATH}/elasticsearch:/usr/share/elasticsearch/data
    networks:
      - web
    ports:
      - ${ELASTICSEARCH_PORT}:9200

  kibana:
    container_name: ${CONTAINER_NAME_PREFIX}kibana
    image: docker.elastic.co/kibana/kibana:7.6.2
    depends_on: 
      - elasticsearch
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    networks:
      - web

networks:

  web:
    name: web
    driver: bridge